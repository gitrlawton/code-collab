{
  "Dictionaries": {
    "Foundational": {
      "1": {
        "theme": "Library Catalog",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Add New Book",
            "problem_instructions": "Every morning the head librarian pairs freshly delivered `titles` with `authors`. Write `catalog_books()` to return a dictionary where each title is the key and its author the value.",
            "example_usage": "print(catalog_books([\"Dune\", \"1984\"], [\"Herbert\", \"Orwell\"]))\nprint(catalog_books([], []))",
            "example_output": "{\"Dune\": \"Herbert\", \"1984\": \"Orwell\"}\n{}",
            "given_python": "def catalog_books(titles, authors):\n    pass",
            "given_java": "public static Map<String,String> catalogBooks(List<String> titles,List<String> authors){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> catalogBooks(const std::vector<std::string>& titles,const std::vector<std::string>& authors){\n    // TODO\n}",
            "given_javascript": "function catalogBooks(titles,authors){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Get Author",
            "problem_instructions": "A patron walks up and asks who wrote a particular book. Using dictionary `catalog`, return the author for `title`, or `None` if the book isn’t on the shelf, by implementing `get_author()`.",
            "example_usage": "print(get_author({\"Dune\": \"Herbert\"}, \"Dune\"))\nprint(get_author({\"Dune\": \"Herbert\"}, \"It\"))",
            "example_output": "\"Herbert\"\nNone",
            "given_python": "def get_author(catalog, title):\n    pass",
            "given_java": "public static String getAuthor(Map<String,String> catalog,String title){\n    // TODO\n}",
            "given_cpp": "std::string getAuthor(const std::map<std::string,std::string>& catalog,const std::string& title){\n    // TODO\n}",
            "given_javascript": "function getAuthor(catalog,title){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Update Copies",
            "problem_instructions": "When a new shipment arrives, the stock clerk must add the delivered `amount` of copies for `title` to the `copies` dictionary. Finish `update_copies()` so the inventory count is updated (or created).",
            "example_usage": "print(update_copies({\"Dune\": 2}, \"Dune\", 3))\nprint(update_copies({}, \"1984\", 1))",
            "example_output": "{\"Dune\": 5}\n{\"1984\": 1}",
            "given_python": "def update_copies(copies, title, amount):\n    pass",
            "given_java": "public static Map<String,Integer> updateCopies(Map<String,Integer> copies,String title,int amount){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> updateCopies(std::map<std::string,int> copies,const std::string& title,int amount){\n    // TODO\n}",
            "given_javascript": "function updateCopies(copies,title,amount){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Total Books",
            "problem_instructions": "At the end of the quarter, the library board wants the total number of physical books in stock. Complete `total_books()` to sum every count in dictionary `copies`.",
            "example_usage": "print(total_books({\"Dune\": 5, \"1984\": 2}))\nprint(total_books({}))",
            "example_output": "7\n0",
            "given_python": "def total_books(copies):\n    pass",
            "given_java": "public static int totalBooks(Map<String,Integer> copies){\n    // TODO\n}",
            "given_cpp": "int totalBooks(const std::map<std::string,int>& copies){\n    // TODO\n}",
            "given_javascript": "function totalBooks(copies){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "List Titles",
            "problem_instructions": "To print a tidy brochure, librarians need all book titles in alphabetical order. Implement `list_titles()` to return a sorted list of keys from `catalog`.",
            "example_usage": "print(list_titles({\"Dune\": \"Herbert\", \"1984\": \"Orwell\"}))\nprint(list_titles({}))",
            "example_output": "[\"1984\", \"Dune\"]\n[]",
            "given_python": "def list_titles(catalog):\n    pass",
            "given_java": "public static List<String> listTitles(Map<String,String> catalog){\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> listTitles(const std::map<std::string,std::string>& catalog){\n    // TODO\n}",
            "given_javascript": "function listTitles(catalog){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Remove Lost Book",
            "problem_instructions": "If a book is reported missing, library staff must remove it from the catalogue. Write `remove_book()` that deletes `title` from dictionary `catalog` if it exists and returns the updated map.",
            "example_usage": "print(remove_book({\"Dune\": \"Herbert\"}, \"Dune\"))\nprint(remove_book({}, \"It\"))",
            "example_output": "{}\n{}",
            "given_python": "def remove_book(catalog, title):\n    pass",
            "given_java": "public static Map<String,String> removeBook(Map<String,String> catalog,String title){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> removeBook(std::map<std::string,std::string> catalog,const std::string& title){\n    // TODO\n}",
            "given_javascript": "function removeBook(catalog,title){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Has Book",
            "problem_instructions": "A reader at the information desk asks whether a title is available. Build `has_book()` that checks if `title` is a key in dictionary `catalog` and returns a boolean.",
            "example_usage": "print(has_book({\"Dune\": \"Herbert\"}, \"Dune\"))\nprint(has_book({}, \"Dune\"))",
            "example_output": "True\nFalse",
            "given_python": "def has_book(catalog, title):\n    pass",
            "given_java": "public static boolean hasBook(Map<String,String> catalog,String title){\n    // TODO\n}",
            "given_cpp": "bool hasBook(const std::map<std::string,std::string>& catalog,const std::string& title){\n    // TODO\n}",
            "given_javascript": "function hasBook(catalog,title){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Count By Genre",
            "problem_instructions": "During a themed display, volunteers read genre stickers aloud into list `genres`. Finish `genre_count()` so it returns a dictionary counting each genre’s occurrences.",
            "example_usage": "print(genre_count([\"SF\", \"Fantasy\", \"SF\"]))\nprint(genre_count([]))",
            "example_output": "{\"SF\": 2, \"Fantasy\": 1}\n{}",
            "given_python": "def genre_count(genres):\n    pass",
            "given_java": "public static Map<String,Integer> genreCount(List<String> genres){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> genreCount(const std::vector<std::string>& genres){\n    // TODO\n}",
            "given_javascript": "function genreCount(genres){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Invert Catalog",
            "problem_instructions": "For an author showcase, curators need fast author-to-title lookup. Create `invert_catalog()` that flips dictionary `catalog`, keeping the last title if an author appears twice.",
            "example_usage": "print(invert_catalog({\"Dune\": \"Herbert\", \"Soul\": \"Herbert\"}))\nprint(invert_catalog({}))",
            "example_output": "{\"Herbert\": \"Soul\"}\n{}",
            "given_python": "def invert_catalog(catalog):\n    pass",
            "given_java": "public static Map<String,String> invertCatalog(Map<String,String> catalog){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> invertCatalog(const std::map<std::string,std::string>& catalog){\n    // TODO\n}",
            "given_javascript": "function invertCatalog(catalog){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "Merge Branch Catalogs",
            "problem_instructions": "Two branch libraries, `catA` and `catB`, are consolidating their data. Write `merge_catalogs()` that returns one dictionary where keys from `catB` override duplicates from `catA`.",
            "example_usage": "print(merge_catalogs({\"Dune\": \"Herbert\"}, {\"Dune\": \"H.\"}))\nprint(merge_catalogs({}, {\"It\": \"King\"}))",
            "example_output": "{\"Dune\": \"H.\"}\n{\"It\": \"King\"}",
            "given_python": "def merge_catalogs(catA, catB):\n    pass",
            "given_java": "public static Map<String,String> mergeCatalogs(Map<String,String> catA,Map<String,String> catB){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> mergeCatalogs(const std::map<std::string,std::string>& catA,const std::map<std::string,std::string>& catB){\n    // TODO\n}",
            "given_javascript": "function mergeCatalogs(catA,catB){\n    // TODO\n}",
            "visual": null
          }
        ]
      },
      "2": {
        "theme": "Zoo Inventory",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Create Animal Map",
            "problem_instructions": "After morning roll‑call, keepers write two lists: `animals` and their pen numbers `pens`. Finish `map_animals()` so each animal maps to its pen in a dictionary.",
            "example_usage": "print(map_animals([\"Lion\", \"Zebra\"], [1, 3]))\nprint(map_animals([], []))",
            "example_output": "{\"Lion\": 1, \"Zebra\": 3}\n{}",
            "given_python": "def map_animals(animals, pens):\n    pass",
            "given_java": "public static Map<String,Integer> mapAnimals(List<String> animals,List<Integer> pens){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> mapAnimals(const std::vector<std::string>& animals,const std::vector<int>& pens){\n    // TODO\n}",
            "given_javascript": "function mapAnimals(animals,pens){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Relocate Animal",
            "problem_instructions": "When renovations happen, a keeper might move an `animal` to `new_pen`. Implement `relocate_animal()` to update dictionary `zoo`, adding the animal if it wasn’t listed.",
            "example_usage": "print(relocate_animal({\"Lion\": 1}, \"Lion\", 2))\nprint(relocate_animal({}, \"Bear\", 5))",
            "example_output": "{\"Lion\": 2}\n{\"Bear\": 5}",
            "given_python": "def relocate_animal(zoo, animal, new_pen):\n    pass",
            "given_java": "public static Map<String,Integer> relocateAnimal(Map<String,Integer> zoo,String animal,int newPen){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> relocateAnimal(std::map<std::string,int> zoo,const std::string& animal,int newPen){\n    // TODO\n}",
            "given_javascript": "function relocateAnimal(zoo,animal,newPen){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Pen Occupancy",
            "problem_instructions": "Tour guides want to know how many residents are in each pen. Given a dictionary `zoo` where each key is an animal and each value is a pen number, complete `pen_occupancy()` so it returns a dictionary mapping each pen to the number of animals in it.",
            "example_usage": "print(pen_occupancy({\"Lion\": 2, \"Zebra\": 3}))\nprint(pen_occupancy({}))",
            "example_output": "{\"2\": 1, \"3\": 1}\n{}",
            "given_python": "def pen_occupancy(zoo):\n    pass",
            "given_java": "public static Map<String,Integer> penOccupancy(Map<String,Integer> zoo){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> penOccupancy(const std::map<std::string,int>& zoo){\n    // TODO\n}",
            "given_javascript": "function penOccupancy(zoo){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Animal Exists",
            "problem_instructions": "Guests sometimes ask if a specific creature is on‑site. Build `animal_exists()` that returns `True` when `animal` is a key in map `zoo`.",
            "example_usage": "print(animal_exists({\"Lion\": 2}, \"Lion\"))\nprint(animal_exists({}, \"Bear\"))",
            "example_output": "True\nFalse",
            "given_python": "def animal_exists(zoo, animal):\n    pass",
            "given_java": "public static boolean animalExists(Map<String,Integer> zoo,String animal){\n    // TODO\n}",
            "given_cpp": "bool animalExists(const std::map<std::string,int>& zoo,const std::string& animal){\n    // TODO\n}",
            "given_javascript": "function animalExists(zoo,animal){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Remove Transfers",
            "problem_instructions": "If an `animal` transfers to another zoo, keepers must remove the animal from their records. Complete `remove_transfer()` to delete the key from dictionary `zoo` and return the result.",
            "example_usage": "print(remove_transfer({\"Lion\": 2}, \"Lion\"))\nprint(remove_transfer({}, \"Bear\"))",
            "example_output": "{}\n{}",
            "given_python": "def remove_transfer(zoo, animal):\n    pass",
            "given_java": "public static Map<String,Integer> removeTransfer(Map<String,Integer> zoo,String animal){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> removeTransfer(std::map<std::string,int> zoo,const std::string& animal){\n    // TODO\n}",
            "given_javascript": "function removeTransfer(zoo,animal){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Swap Pens",
            "problem_instructions": "Two exhibits trade occupants for enrichment. Implement `swap_pens()` so animals `a1` and `a2` exchange their pen numbers in map `zoo` (do nothing if one is missing).",
            "example_usage": "print(swap_pens({\"Lion\": 1, \"Bear\": 2}, \"Lion\", \"Bear\"))\nprint(swap_pens({\"Lion\": 1}, \"Lion\", \"Tiger\"))",
            "example_output": "{\"Lion\": 2, \"Bear\": 1}\n{\"Lion\": 1}",
            "given_python": "def swap_pens(zoo, a1, a2):\n    pass",
            "given_java": "public static Map<String,Integer> swapPens(Map<String,Integer> zoo,String a1,String a2){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> swapPens(std::map<std::string,int> zoo,const std::string& a1,const std::string& a2){\n    // TODO\n}",
            "given_javascript": "function swapPens(zoo,a1,a2){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Species Count",
            "problem_instructions": "During a wildlife census, every new arrival’s species name is recorded in list `species`. Build `species_count()` to return a tally dictionary.",
            "example_usage": "print(species_count([\"Lion\", \"Tiger\", \"Lion\"]))\nprint(species_count([]))",
            "example_output": "{\"Lion\": 2, \"Tiger\": 1}\n{}",
            "given_python": "def species_count(species):\n    pass",
            "given_java": "public static Map<String,Integer> speciesCount(List<String> species){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> speciesCount(const std::vector<std::string>& species){\n    // TODO\n}",
            "given_javascript": "function speciesCount(species){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Invert Pens",
            "problem_instructions": "For a signage update, transform map `zoo` so that each pen maps to its animal using `invert_pens()`. If two animals share a pen, keep whichever appears last.",
            "example_usage": "print(invert_pens({\"Lion\": 1, \"Zebra\": 1}))\nprint(invert_pens({}))",
            "example_output": "{\"1\": \"Zebra\"}\n{}",
            "given_python": "def invert_pens(zoo):\n    pass",
            "given_java": "public static Map<Integer,String> invertPens(Map<String,Integer> zoo){\n    // TODO\n}",
            "given_cpp": "std::map<int,std::string> invertPens(const std::map<std::string,int>& zoo){\n    // TODO\n}",
            "given_javascript": "function invertPens(zoo){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Merge Inventories",
            "problem_instructions": "Day and night shifts each maintain a map of which animal is in which pen, resulting in maps `shiftA` and `shiftB`. Use `merge_inventories()` to combine them, letting `shiftB` overwrite overlaps.",
            "example_usage": "print(merge_inventories({\"Lion\": 1}, {\"Lion\": 2}))\nprint(merge_inventories({}, {\"Bear\": 3}))",
            "example_output": "{\"Lion\": 2}\n{\"Bear\": 3}",
            "given_python": "def merge_inventories(shiftA, shiftB):\n    pass",
            "given_java": "public static Map<String,Integer> mergeInventories(Map<String,Integer> shiftA,Map<String,Integer> shiftB){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> mergeInventories(const std::map<std::string,int>& shiftA,const std::map<std::string,int>& shiftB){\n    // TODO\n}",
            "given_javascript": "function mergeInventories(shiftA,shiftB){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "Pens Filled",
            "problem_instructions": "Zoo management checks if certain pens are occupied before a tour. Implement `pens_filled()` to return `True` only when every pen in list `pens_list` appears as a value in map `zoo`.",
            "example_usage": "print(pens_filled({\"Lion\": 1, \"Bear\": 2}, [1, 2]))\nprint(pens_filled({\"Lion\": 1}, [1, 2]))",
            "example_output": "True\nFalse",
            "given_python": "def pens_filled(zoo, pens_list):\n    pass",
            "given_java": "public static boolean pensFilled(Map<String,Integer> zoo,List<Integer> pensList){\n    // TODO\n}",
            "given_cpp": "bool pensFilled(const std::map<std::string,int>& zoo,const std::vector<int>& pensList){\n    // TODO\n}",
            "given_javascript": "function pensFilled(zoo,pensList){\n    // TODO\n}",
            "visual": null
          }
        ]
      },
      "3": {
        "theme": "Space Mission Logs",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Create Telemetry Map",
            "problem_instructions": "Each second a probe streams paired arrays `codes` and `values`. Finish `create_telemetry()` to bundle them into a dictionary, mapping each code to its value.",
            "example_usage": "print(create_telemetry([\"TEMP\", \"VOLT\"], [23, 5]))\nprint(create_telemetry([], []))",
            "example_output": "{\"TEMP\": 23, \"VOLT\": 5}\n{}",
            "given_python": "def create_telemetry(codes, values):\n    pass",
            "given_java": "public static Map<String,Integer> createTelemetry(List<String> codes,List<Integer> values){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> createTelemetry(const std::vector<std::string>& codes,const std::vector<int>& values){\n    // TODO\n}",
            "given_javascript": "function createTelemetry(codes,values){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Get Reading",
            "problem_instructions": "Mission control queries dictionary `log` for a specific `code`. Build `get_reading()` to return its numeric value or `None` if the code hasn’t arrived.",
            "example_usage": "print(get_reading({\"TEMP\": 23}, \"TEMP\"))\nprint(get_reading({}, \"TEMP\"))",
            "example_output": "23\nNone",
            "given_python": "def get_reading(log, code):\n    pass",
            "given_java": "public static Integer getReading(Map<String,Integer> log,String code){\n    // TODO\n}",
            "given_cpp": "int getReading(const std::map<std::string,int>& log,const std::string& code){\n    // TODO\n}",
            "given_javascript": "function getReading(log,code){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Increment Counter",
            "problem_instructions": "Every thruster ignition increments a counter in map `counters`. Complete `increment_counter()` to add 1 to `key` (creating it if needed) and return the map.",
            "example_usage": "print(increment_counter({\"FIRE\": 1}, \"FIRE\"))\nprint(increment_counter({}, \"FIRE\"))",
            "example_output": "{\"FIRE\": 2}\n{\"FIRE\": 1}",
            "given_python": "def increment_counter(counters, key):\n    pass",
            "given_java": "public static Map<String,Integer> incrementCounter(Map<String,Integer> counters,String key){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> incrementCounter(std::map<std::string,int> counters,const std::string& key){\n    // TODO\n}",
            "given_javascript": "function incrementCounter(counters,key){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Highest Reading",
            "problem_instructions": "Alarms trigger when a sensor peaks. Implement `highest_reading()` to return the key with the greatest value in dictionary `log`, or `None` if empty.",
            "example_usage": "print(highest_reading({\"TEMP\": 23, \"VOLT\": 5}))\nprint(highest_reading({}))",
            "example_output": "\"TEMP\"\nNone",
            "given_python": "def highest_reading(log):\n    pass",
            "given_java": "public static String highestReading(Map<String,Integer> log){\n    // TODO\n}",
            "given_cpp": "std::string highestReading(const std::map<std::string,int>& log){\n    // TODO\n}",
            "given_javascript": "function highestReading(log){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Threshold Alert",
            "problem_instructions": "Flight software scans `log` for any readings above safety `limit`. Build `threshold_alert()` to return a list of keys exceeding that limit.",
            "example_usage": "print(threshold_alert({\"TEMP\": 23, \"VOLT\": 5}, 10))\nprint(threshold_alert({}, 1))",
            "example_output": "[\"TEMP\"]\n[]",
            "given_python": "def threshold_alert(log, limit):\n    pass",
            "given_java": "public static List<String> thresholdAlert(Map<String,Integer> log,int limit){\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> thresholdAlert(const std::map<std::string,int>& log,int limit){\n    // TODO\n}",
            "given_javascript": "function thresholdAlert(log,limit){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Remove Stale",
            "problem_instructions": "After a system reboot, outdated keys in list `keys` must be dropped. Write `remove_stale()` that removes each key from dictionary `log` and returns the result.",
            "example_usage": "print(remove_stale({\"TEMP\": 23, \"OLD\": 1}, [\"OLD\"]))\nprint(remove_stale({}, [\"X\"]))",
            "example_output": "{\"TEMP\": 23}\n{}",
            "given_python": "def remove_stale(log, keys):\n    pass",
            "given_java": "public static Map<String,Integer> removeStale(Map<String,Integer> log,List<String> keys){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> removeStale(std::map<std::string,int> log,const std::vector<std::string>& keys){\n    // TODO\n}",
            "given_javascript": "function removeStale(log,keys){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Sum Readings",
            "problem_instructions": "Energy planners need the total of all numeric values in `log`. Implement `sum_readings()` to compute that sum (0 if `log` is empty).",
            "example_usage": "print(sum_readings({\"TEMP\": 23, \"VOLT\": 5}))\nprint(sum_readings({}))",
            "example_output": "28\n0",
            "given_python": "def sum_readings(log):\n    pass",
            "given_java": "public static int sumReadings(Map<String,Integer> log){\n    // TODO\n}",
            "given_cpp": "int sumReadings(const std::map<std::string,int>& log){\n    // TODO\n}",
            "given_javascript": "function sumReadings(log){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Key List",
            "problem_instructions": "Archivists archive sensor names alphabetically. Build `key_list()` to return a sorted array of keys from dictionary `log`.",
            "example_usage": "print(key_list({\"VOLT\": 5, \"TEMP\": 23}))\nprint(key_list({}))",
            "example_output": "[\"TEMP\", \"VOLT\"]\n[]",
            "given_python": "def key_list(log):\n    pass",
            "given_java": "public static List<String> keyList(Map<String,Integer> log){\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> keyList(const std::map<std::string,int>& log){\n    // TODO\n}",
            "given_javascript": "function keyList(log){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Copy Log",
            "problem_instructions": "Telemetry snapshots must be immutable. Return a shallow copy of dictionary `log` with `copy_log()` so analysts can annotate safely.",
            "example_usage": "print(copy_log({\"TEMP\": 23}))\nprint(copy_log({}))",
            "example_output": "{\"TEMP\": 23}\n{}",
            "given_python": "def copy_log(log):\n    pass",
            "given_java": "public static Map<String,Integer> copyLog(Map<String,Integer> log){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> copyLog(const std::map<std::string,int>& log){\n    // TODO\n}",
            "given_javascript": "function copyLog(log){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "Merge Logs",
            "problem_instructions": "Module A and Module B send overlapping sensor dictionaries `modA` and `modB`. Using `merge_logs()`, return one map where values from `modB` replace duplicates from `modA`.",
            "example_usage": "print(merge_logs({\"TEMP\": 20}, {\"TEMP\": 25}))\nprint(merge_logs({}, {\"VOLT\": 3}))",
            "example_output": "{\"TEMP\": 25}\n{\"VOLT\": 3}",
            "given_python": "def merge_logs(modA, modB):\n    pass",
            "given_java": "public static Map<String,Integer> mergeLogs(Map<String,Integer> modA,Map<String,Integer> modB){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> mergeLogs(const std::map<std::string,int>& modA,const std::map<std::string,int>& modB){\n    // TODO\n}",
            "given_javascript": "function mergeLogs(modA,modB){\n    // TODO\n}",
            "visual": null
          }
        ]
      },
      "4": {
        "theme": "Café Orders",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "New Order",
            "problem_instructions": "At the espresso bar, baristas jot two lists—customer `names` and their chosen `drinks`. Write `new_order()` returning a dictionary where each customer name maps to their drink.",
            "example_usage": "print(new_order([\"Ana\"], [\"Latte\"]))\nprint(new_order([], []))",
            "example_output": "{\"Ana\": \"Latte\"}\n{}",
            "given_python": "def new_order(names, drinks):\n    pass",
            "given_java": "public static Map<String,String> newOrder(List<String> names,List<String> drinks){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> newOrder(const std::vector<std::string>& names,const std::vector<std::string>& drinks){\n    // TODO\n}",
            "given_javascript": "function newOrder(names,drinks){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Get Drink",
            "problem_instructions": "When a cup is ready, the barista calls the customer. Build `get_drink()` to fetch the drink for `name` from dictionary `order`, returning `None` if they haven’t ordered.",
            "example_usage": "print(get_drink({\"Ana\": \"Latte\"}, \"Ana\"))\nprint(get_drink({}, \"Ben\"))",
            "example_output": "\"Latte\"\nNone",
            "given_python": "def get_drink(order, name):\n    pass",
            "given_java": "public static String getDrink(Map<String,String> order,String name){\n    // TODO\n}",
            "given_cpp": "std::string getDrink(const std::map<std::string,std::string>& order,const std::string& name){\n    // TODO\n}",
            "given_javascript": "function getDrink(order,name){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Change Drink",
            "problem_instructions": "Sometimes a customer changes their mind mid‑queue. Write `change_drink()` so `name`'s value in dictionary `order` becomes `drink` (adding them if missing).",
            "example_usage": "print(change_drink({\"Ana\": \"Latte\"}, \"Ana\", \"Mocha\"))\nprint(change_drink({}, \"Ben\", \"Tea\"))",
            "example_output": "{\"Ana\": \"Mocha\"}\n{\"Ben\": \"Tea\"}",
            "given_python": "def change_drink(order, name, drink):\n    pass",
            "given_java": "public static Map<String,String> changeDrink(Map<String,String> order,String name,String drink){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> changeDrink(std::map<std::string,std::string> order,const std::string& name,const std::string& drink){\n    // TODO\n}",
            "given_javascript": "function changeDrink(order,name,drink){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Remove Customer",
            "problem_instructions": "If a customer leaves and doesn't pick up their order, after some time baristas must erase their entry. Complete `remove_customer()` to delete key `name` from map `order` and return the dictionary.",
            "example_usage": "print(remove_customer({\"Ana\": \"Mocha\"}, \"Ana\"))\nprint(remove_customer({}, \"Ben\"))",
            "example_output": "{}\n{}",
            "given_python": "def remove_customer(order, name):\n    pass",
            "given_java": "public static Map<String,String> removeCustomer(Map<String,String> order,String name){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> removeCustomer(std::map<std::string,std::string> order,const std::string& name){\n    // TODO\n}",
            "given_javascript": "function removeCustomer(order,name){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Count Drinks",
            "problem_instructions": "The manager checks how many of each beverage were sold. Using dictionary `order`, implement `count_drinks()` to return a dictionary where each drink maps to its number sold.",
            "example_usage": "print(count_drinks({\"Ana\": \"Mocha\", \"Ben\": \"Tea\", \"Clio\": \"Mocha\"}))\nprint(count_drinks({}))",
            "example_output": "{\"Mocha\": 2, \"Tea\": 1}\n{}",
            "given_python": "def count_drinks(order):\n    pass",
            "given_java": "public static Map<String,Integer> countDrinks(Map<String,String> order){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,int> countDrinks(const std::map<std::string,std::string>& order){\n    // TODO\n}",
            "given_javascript": "function countDrinks(order){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Most Popular Drink",
            "problem_instructions": "The chalkboard highlights the crowd favorite. Build `popular_drink()` to return the most frequent value in `order`.  In the case of a tie, return any most frequent value.",
            "example_usage": "print(popular_drink({\"Ana\": \"Mocha\", \"Ben\": \"Tea\", \"Clio\": \"Mocha\"}))\nprint(popular_drink({}))",
            "example_output": "\"Mocha\"\nNone",
            "given_python": "def popular_drink(order):\n    pass",
            "given_java": "public static String popularDrink(Map<String,String> order){\n    // TODO\n}",
            "given_cpp": "std::string popularDrink(const std::map<std::string,std::string>& order){\n    // TODO\n}",
            "given_javascript": "function popularDrink(order){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Reverse Order",
            "problem_instructions": "For a playful announcement, staff want a drink→customer map. Write `reverse_order()` that inverts dictionary `order`, keeping the last customer when duplicates occur.",
            "example_usage": "print(reverse_order({\"Ana\": \"Mocha\", \"Ben\": \"Mocha\"}))\nprint(reverse_order({}))",
            "example_output": "{\"Mocha\": \"Ben\"}\n{}",
            "given_python": "def reverse_order(order):\n    pass",
            "given_java": "public static Map<String,String> reverseOrder(Map<String,String> order){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> reverseOrder(const std::map<std::string,std::string>& order){\n    // TODO\n}",
            "given_javascript": "function reverseOrder(order){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Merge Tabs",
            "problem_instructions": "When two baristas combine their till sheets, dictionaries `tabA` and `tabB` must be merged. Implement `merge_tabs()` so entries from `tabB` override any duplicates in `tabA`.",
            "example_usage": "print(merge_tabs({\"Ana\": \"Mocha\"}, {\"Ana\": \"Latte\"}))\nprint(merge_tabs({}, {\"Ben\": \"Tea\"}))",
            "example_output": "{\"Ana\": \"Latte\"}\n{\"Ben\": \"Tea\"}",
            "given_python": "def merge_tabs(tabA, tabB):\n    pass",
            "given_java": "public static Map<String,String> mergeTabs(Map<String,String> tabA,Map<String,String> tabB){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> mergeTabs(const std::map<std::string,std::string>& tabA,const std::map<std::string,std::string>& tabB){\n    // TODO\n}",
            "given_javascript": "function mergeTabs(tabA,tabB){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Clear Café",
            "problem_instructions": "Lights off means all tabs reset. Finish `clear_cafe()` to remove every entry from dictionary `order` and return the now‑empty map.",
            "example_usage": "print(clear_cafe({\"Ana\": \"Mocha\"}))\nprint(clear_cafe({}))",
            "example_output": "{}\n{}",
            "given_python": "def clear_cafe(order):\n    pass",
            "given_java": "public static Map<String,String> clearCafe(Map<String,String> order){\n    // TODO\n}",
            "given_cpp": "std::map<std::string,std::string> clearCafe(std::map<std::string,std::string> order){\n    // TODO\n}",
            "given_javascript": "function clearCafe(order){\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "All Drinks Present",
            "problem_instructions": "Before ordering supplies, the manager verifies that every beverage in `drink_list` was sold. Using dictionary `order`, return `True` from `all_drinks_present()` only if each drink appears at least once among the values.",
            "example_usage": "print(all_drinks_present({\"Ana\": \"Mocha\", \"Ben\": \"Tea\"}, [\"Tea\", \"Mocha\"]))\nprint(all_drinks_present({}, [\"Tea\"]))",
            "example_output": "True\nFalse",
            "given_python": "def all_drinks_present(order, drink_list):\n    pass",
            "given_java": "public static boolean allDrinksPresent(Map<String,String> order,List<String> drinkList){\n    // TODO\n}",
            "given_cpp": "bool allDrinksPresent(const std::map<std::string,std::string>& order,const std::vector<std::string>& drinkList){\n    // TODO\n}",
            "given_javascript": "function allDrinksPresent(order,drinkList){\n    // TODO\n}",
            "visual": null
          }
        ]
      }
    }
  }
}
