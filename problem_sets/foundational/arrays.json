{
  "Arrays": {
    "Foundational": {
      "1": {
        "theme": "Sunken Treasure Expedition",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Inventory Count",
            "problem_instructions": "The crew prepares for the expedition by listing all items recovered from the seabed. Given an array `artifacts`, write `count_artifacts` that returns how many items are in the list.",
            "example_usage": "artifacts = [\"gold coin\", \"emerald\", \"ancient vase\"]\nprint(count_artifacts(artifacts))\n\nartifacts = []\nprint(count_artifacts(artifacts))\n\nartifacts = [\"pearl\"]\nprint(count_artifacts(artifacts))",
            "example_output": "3\n0\n1",
            "given_python": "def count_artifacts(artifacts):\n    pass",
            "given_java": "public static int countArtifacts(List<String> artifacts) {\n    // TODO\n}",
            "given_cpp": "int countArtifacts(const std::vector<std::string>& artifacts) {\n    // TODO\n}",
            "given_javascript": "function countArtifacts(artifacts) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "First and Last Discovery",
            "problem_instructions": "Once the ship’s hold is loaded, the captain wants to record only the very first and last artifact found. Given an array `discoveries`, write `first_and_last` to return a new array containing the first and last element (in that order). If `discoveries` has one item, return it twice; if empty, return an empty array.",
            "example_usage": "discoveries = [\"bronze statue\", \"silver coin\", \"lost ring\"]\nprint(first_and_last(discoveries))\n\ndiscoveries = [\"emerald\"]\nprint(first_and_last(discoveries))\n\ndiscoveries = []\nprint(first_and_last(discoveries))",
            "example_output": "[\"bronze statue\", \"lost ring\"]\n[\"emerald\", \"emerald\"]\n[]",
            "given_python": "def first_and_last(discoveries):\n    pass",
            "given_java": "public static List<String> firstAndLast(List<String> discoveries) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> firstAndLast(const std::vector<std::string>& discoveries) {\n    // TODO\n}",
            "given_javascript": "function firstAndLast(discoveries) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Total Cargo Weight",
            "problem_instructions": "Before diving deeper, the crew tallies the total weight of recovered treasures. Given an array of numbers `weights`, write `total_weight` to return the sum of all weights. If `weights` is empty, return 0.",
            "example_usage": "weights = [10.5, 5.25, 3.0]\nprint(total_weight(weights))\n\nweights = []\nprint(total_weight(weights))\n\nweights = [7]\nprint(total_weight(weights))",
            "example_output": "18.75\n0\n7",
            "given_python": "def total_weight(weights):\n    pass",
            "given_java": "public static double totalWeight(List<Double> weights) {\n    // TODO\n}",
            "given_cpp": "double totalWeight(const std::vector<double>& weights) {\n    // TODO\n}",
            "given_javascript": "function totalWeight(weights) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Heaviest Artifact",
            "problem_instructions": "The archaeologist wants to know which single artifact is the heaviest. Given `weights`, write `heaviest_weight` to return the largest number. If `weights` is empty, return `None`.",
            "example_usage": "weights = [5, 12, 7]\nprint(heaviest_weight(weights))\n\nweights = []\nprint(heaviest_weight(weights))\n\nweights = [4, 4, 4]\nprint(heaviest_weight(weights))",
            "example_output": "12\nNone\n4",
            "given_python": "def heaviest_weight(weights):\n    pass",
            "given_java": "public static Double heaviestWeight(List<Double> weights) {\n    // TODO\n}",
            "given_cpp": "double heaviestWeight(const std::vector<double>& weights) {\n    // TODO\n}",
            "given_javascript": "function heaviestWeight(weights) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Find Dive Zone",
            "problem_instructions": "After charting the zone names, the team needs the position of a specific dive zone. Given an array `plan` and a string `target_zone`, write `find_zone_index` to return the index of `target_zone`. If not found, return -1.",
            "example_usage": "plan = [\"Zone A\", \"Zone B\", \"Zone C\"]\nprint(find_zone_index(plan, \"Zone B\"))\n\nplan = [\"Zone X\"]\nprint(find_zone_index(plan, \"Zone Y\"))\n\nplan = []\nprint(find_zone_index(plan, \"Any\"))",
            "example_output": "1\n-1\n-1",
            "given_python": "def find_zone_index(plan, target_zone):\n    pass",
            "given_java": "public static int findZoneIndex(List<String> plan, String targetZone) {\n    // TODO\n}",
            "given_cpp": "int findZoneIndex(const std::vector<std::string>& plan, const std::string& targetZone) {\n    // TODO\n}",
            "given_javascript": "function findZoneIndex(plan, targetZone) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Contains Sunken Chest",
            "problem_instructions": "The security officer checks if a legendary chest made it onboard. Given an array `containers` and a string `chest_name`, write `has_chest` to return `True` if `chest_name` is present, otherwise `False`.",
            "example_usage": "containers = [\"wooden box\", \"iron chest\", \"golden urn\"]\nprint(has_chest(containers, \"iron chest\"))\n\ncontainers = [\"crate\"]\nprint(has_chest(containers, \"barrel\"))\n\ncontainers = []\nprint(has_chest(containers, \"any chest\"))",
            "example_output": "True\nFalse\nFalse",
            "given_python": "def has_chest(containers, chest_name):\n    pass",
            "given_java": "public static boolean hasChest(List<String> containers, String chestName) {\n    // TODO\n}",
            "given_cpp": "bool hasChest(const std::vector<std::string>& containers, const std::string& chestName) {\n    // TODO\n}",
            "given_javascript": "function hasChest(containers, chestName) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Reverse Dive Sequence",
            "problem_instructions": "To retrace their steps, the team reverses the dive order. Given an array of integers `dive_sequence`, write `reverse_sequence` to return a new array with elements in reverse order.",
            "example_usage": "dive_sequence = [1, 2, 3, 4]\nprint(reverse_sequence(dive_sequence))\n\ndive_sequence = [5, 10]\nprint(reverse_sequence(dive_sequence))\n\ndive_sequence = []\nprint(reverse_sequence(dive_sequence))",
            "example_output": "[4, 3, 2, 1]\n[10, 5]\n[]",
            "given_python": "def reverse_sequence(dive_sequence):\n    pass",
            "given_java": "public static <T> List<T> reverseSequence(List<T> diveSequence) {\n    // TODO\n}",
            "given_cpp": "template<typename T>\nstd::vector<T> reverseSequence(const std::vector<T>& diveSequence) {\n    // TODO\n}",
            "given_javascript": "function reverseSequence(diveSequence) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Filter Heavy Artifacts",
            "problem_instructions": "Back on deck, they separate out the heaviest treasures. Given an array `artifact_weights` and a number `min_weight`, write `filter_heavy` to return an array of weights greater than or equal to `min_weight`.",
            "example_usage": "artifact_weights = [2.5, 7.0, 4.5]\nprint(filter_heavy(artifact_weights, 5))\n\nartifact_weights = [1, 1, 1]\nprint(filter_heavy(artifact_weights, 1))\n\nartifact_weights = []\nprint(filter_heavy(artifact_weights, 10))",
            "example_output": "[7.0]\n[1, 1, 1]\n[]",
            "given_python": "def filter_heavy(artifact_weights, min_weight):\n    pass",
            "given_java": "public static List<Double> filterHeavy(List<Double> artifactWeights, double minWeight) {\n    // TODO\n}",
            "given_cpp": "std::vector<double> filterHeavy(const std::vector<double>& artifactWeights, double minWeight) {\n    // TODO\n}",
            "given_javascript": "function filterHeavy(artifact_weights, min_weight) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Rotate Dive Order",
            "problem_instructions": "The captain decides to shift the dive plan by a certain offset. Given an array `order` and integer `k`, write `rotate_order` to return a new array rotated to the right by `k` positions. If `order` is empty or `k` ≤ 0, return `order` unchanged.",
            "example_usage": "order = [1, 2, 3, 4, 5]\nprint(rotate_order(order, 2))\n\norder = [10, 20, 30]\nprint(rotate_order(order, 3))\n\norder = []\nprint(rotate_order(order, 5))",
            "example_output": "[4, 5, 1, 2, 3]\n[10, 20, 30]\n[]",
            "given_python": "def rotate_order(order, k):\n    pass",
            "given_java": "public static List<Integer> rotateOrder(List<Integer> order, int k) {\n    // TODO\n}",
            "given_cpp": "std::vector<int> rotateOrder(const std::vector<int>& order, int k) {\n    // TODO\n}",
            "given_javascript": "function rotateOrder(order, k) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "Merge Expedition Logs",
            "problem_instructions": "At the end of the day, logs from two dive teams must be combined. Given two arrays `logA` and `logB`, write `merge_logs` to return a single array containing all entries from `logA` followed by all entries from `logB`.",
            "example_usage": "logA = [\"Start\", \"Dive1\"]\nlogB = [\"Surface\", \"End\"]\nprint(merge_logs(logA, logB))\n\nlogA = []\nlogB = [\"Note\"]\nprint(merge_logs(logA, logB))\n\nlogA = [\"Alpha\"]\nlogB = []\nprint(merge_logs(logA, logB))",
            "example_output": "[\"Start\", \"Dive1\", \"Surface\", \"End\"]\n[\"Note\"]\n[\"Alpha\"]",
            "given_python": "def merge_logs(logA, logB):\n    pass",
            "given_java": "public static List<String> mergeLogs(List<String> logA, List<String> logB) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> mergeLogs(const std::vector<std::string>& logA, const std::vector<std::string>& logB) {\n    // TODO\n}",
            "given_javascript": "function mergeLogs(logA, logB) {\n    // TODO\n}",
            "visual": null
          }
        ]
      },

      "2": {
        "theme": "Galactic Fleet Deployment",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Remove Damaged Ships",
            "problem_instructions": "Before launch, the admiral wants to remove all damaged ships labeled `damaged_type` from the `fleet_list`. Write `remove_damaged_ships` that returns a new array without any occurrences of `damaged_type`.",
            "example_usage": "fleet_list = [\"Explorer\", \"Defender\", \"Defender\", \"Scout\"]\ndamaged_type = \"Defender\"\nprint(remove_damaged_ships(fleet_list, damaged_type))\n\nfleet_list = [\"Scout\"]\ndamaged_type = \"Scout\"\nprint(remove_damaged_ships(fleet_list, damaged_type))\n\nfleet_list = []\ndamaged_type = \"Any\"\nprint(remove_damaged_ships(fleet_list, damaged_type))",
            "example_output": "[\"Explorer\", \"Scout\"]\n[]\n[]",
            "given_python": "def remove_damaged_ships(fleet_list, damaged_type):\n    pass",
            "given_java": "public static List<String> removeDamagedShips(List<String> fleetList, String damagedType) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> removeDamagedShips(const std::vector<std::string>& fleetList, const std::string& damagedType) {\n    // TODO\n}",
            "given_javascript": "function removeDamagedShips(fleet_list, damaged_type) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Insert Reinforcement Ship",
            "problem_instructions": "With the damaged ships removed, the logistics officer needs to insert a reinforcement ship `new_ship` into the `fleet_manifest` at position `insert_index`. Write `insert_ship` to return a new array reflecting this insertion (if `insert_index` is out of bounds, append at the end).",
            "example_usage": "fleet_manifest = [\"Explorer\", \"Scout\"]\nnew_ship = \"Voyager\"\ninsert_index = 1\nprint(insert_ship(fleet_manifest, new_ship, insert_index))\n\nfleet_manifest = [\"Alpha\"]\nnew_ship = \"Beta\"\ninsert_index = 0\nprint(insert_ship(fleet_manifest, new_ship, insert_index))\n\nfleet_manifest = []\nnew_ship = \"Pioneer\"\ninsert_index = 5\nprint(insert_ship(fleet_manifest, new_ship, insert_index))",
            "example_output": "[\"Explorer\", \"Voyager\", \"Scout\"]\n[\"Beta\", \"Alpha\"]\n[\"Pioneer\"]",
            "given_python": "def insert_ship(fleet_manifest, new_ship, insert_index):\n    pass",
            "given_java": "public static List<String> insertShip(List<String> fleetManifest, String newShip, int insertIndex) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> insertShip(const std::vector<std::string>& fleetManifest, const std::string& newShip, int insertIndex) {\n    // TODO\n}",
            "given_javascript": "function insertShip(fleet_manifest, new_ship, insert_index) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Check Fleet Symmetry",
            "problem_instructions": "To ensure formation symmetry, the commander checks if the current `fleet_formation` reads the same forward and backward. Write `is_fleet_palindrome` that returns `True` if symmetric, otherwise `False`.",
            "example_usage": "fleet_formation = [\"Alpha\", \"Beta\", \"Alpha\"]\nprint(is_fleet_palindrome(fleet_formation))\n\nfleet_formation = [\"A\", \"B\", \"C\"]\nprint(is_fleet_palindrome(fleet_formation))\n\nfleet_formation = []\nprint(is_fleet_palindrome(fleet_formation))",
            "example_output": "True\nFalse\nTrue",
            "given_python": "def is_fleet_palindrome(fleet_formation):\n    pass",
            "given_java": "public static boolean isFleetPalindrome(List<String> fleetFormation) {\n    // TODO\n}",
            "given_cpp": "bool isFleetPalindrome(const std::vector<std::string>& fleetFormation) {\n    // TODO\n}",
            "given_javascript": "function isFleetPalindrome(fleet_formation) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Count Unique Crew Roles",
            "problem_instructions": "Each ship logs its crew roles in `crew_types`. The HR officer wants to know how many distinct roles there are. Write `count_unique_types` that returns the number of unique strings in `crew_types`.",
            "example_usage": "crew_types = [\"Pilot\", \"Engineer\", \"Pilot\", \"Medic\"]\nprint(count_unique_types(crew_types))\n\ncrew_types = [\"Pilot\", \"Engineer\"]\nprint(count_unique_types(crew_types))\n\ncrew_types = []\nprint(count_unique_types(crew_types))",
            "example_output": "3\n2\n0",
            "given_python": "def count_unique_types(crew_types):\n    pass",
            "given_java": "public static int countUniqueTypes(List<String> crewTypes) {\n    // TODO\n}",
            "given_cpp": "int countUniqueTypes(const std::vector<std::string>& crewTypes) {\n    // TODO\n}",
            "given_javascript": "function countUniqueTypes(crew_types) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Second Longest Range",
            "problem_instructions": "The officer needs the second-longest mission range from `ship_ranges`. Write `second_longest_range` to return the second-highest unique number. If fewer than two unique values exist, return `None`.",
            "example_usage": "ship_ranges = [500, 750, 1000, 750]\nprint(second_longest_range(ship_ranges))\n\nship_ranges = [300, 300]\nprint(second_longest_range(ship_ranges))\n\nship_ranges = [800]\nprint(second_longest_range(ship_ranges))",
            "example_output": "750\nNone\nNone",
            "given_python": "def second_longest_range(ship_ranges):\n    pass",
            "given_java": "public static Double secondLongestRange(List<Double> shipRanges) {\n    // TODO\n}",
            "given_cpp": "double secondLongestRange(const std::vector<double>& shipRanges) {\n    // TODO\n}",
            "given_javascript": "function secondLongestRange(ship_ranges) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Swap Docked Pairs",
            "problem_instructions": "At the docking bay, ships in `docked_ships` are paired for inspection. Write `swap_docked_pairs` to return a new array where each adjacent pair swaps positions. If there's an unpaired ship at the end, leave it in place.",
            "example_usage": "docked_ships = [\"A\", \"B\", \"C\", \"D\"]\nprint(swap_docked_pairs(docked_ships))\n\ndocked_ships = [\"X\", \"Y\", \"Z\"]\nprint(swap_docked_pairs(docked_ships))\n\ndocked_ships = []\nprint(swap_docked_pairs(docked_ships))",
            "example_output": "[\"B\", \"A\", \"D\", \"C\"]\n[\"Y\", \"X\", \"Z\"]\n[]",
            "given_python": "def swap_docked_pairs(docked_ships):\n    pass",
            "given_java": "public static <T> List<T> swapDockedPairs(List<T> dockedShips) {\n    // TODO\n}",
            "given_cpp": "template<typename T>\nstd::vector<T> swapDockedPairs(const std::vector<T>& dockedShips) {\n    // TODO\n}",
            "given_javascript": "function swapDockedPairs(docked_ships) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Partition Fully Fueled Ships",
            "problem_instructions": "Before departure, ships are split by fuel status. Given `fuel_levels` and threshold `min_full_fuel`, write `partition_fully_fueled` to return `[full, not_full]`, where `full` holds levels ≥ threshold, and `not_full` the rest.",
            "example_usage": "fuel_levels = [100, 50, 75, 120]\nmin_full_fuel = 75\nprint(partition_fully_fueled(fuel_levels, min_full_fuel))\n\nfuel_levels = [60, 60]\nmin_full_fuel = 60\nprint(partition_fully_fueled(fuel_levels, min_full_fuel))\n\nfuel_levels = []\nmin_full_fuel = 10\nprint(partition_fully_fueled(fuel_levels, min_full_fuel))",
            "example_output": "[[100, 75, 120], [50]]\n[[60, 60], []]\n[[], []]",
            "given_python": "def partition_fully_fueled(fuel_levels, min_full_fuel):\n    pass",
            "given_java": "public static List<List<Double>> partitionFullyFueled(List<Double> fuelLevels, double minFullFuel) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::vector<double>> partitionFullyFueled(const std::vector<double>& fuelLevels, double minFullFuel) {\n    // TODO\n}",
            "given_javascript": "function partitionFullyFueled(fuel_levels, min_full_fuel) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Chunk Fleet into Squadrons",
            "problem_instructions": "The admiral organizes the `fleet_list` into squadrons of size `squadron_size`. Write `chunk_fleet` to return an array of subarrays, each of length `squadron_size` (the last may be smaller).",
            "example_usage": "fleet_list = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nsquadron_size = 2\nprint(chunk_fleet(fleet_list, squadron_size))\n\nfleet_list = [\"X\", \"Y\"]\nsquadron_size = 3\nprint(chunk_fleet(fleet_list, squadron_size))\n\nfleet_list = []\nsquadron_size = 1\nprint(chunk_fleet(fleet_list, squadron_size))",
            "example_output": "[[\"A\", \"B\"], [\"C\", \"D\"], [\"E\"]]\n[[\"X\", \"Y\"]]\n[]",
            "given_python": "def chunk_fleet(fleet_list, squadron_size):\n    pass",
            "given_java": "public static <T> List<List<T>> chunkFleet(List<T> fleetList, int squadronSize) {\n    // TODO\n}",
            "given_cpp": "template<typename T>\nstd::vector<std::vector<T>> chunkFleet(const std::vector<T>& fleetList, int squadronSize) {\n    // TODO\n}",
            "given_javascript": "function chunkFleet(fleet_list, squadron_size) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Verify Supply Pair",
            "problem_instructions": "Mission control needs exactly two supplies summing to `required_supply`. Given `supply_counts`, write `has_supply_pair` to return `True` if any two distinct values sum to the target, otherwise `False`.",
            "example_usage": "supply_counts = [5, 3, 2, 7]\nrequired_supply = 10\nprint(has_supply_pair(supply_counts, required_supply))\n\nsupply_counts = [1, 2, 3]\nrequired_supply = 6\nprint(has_supply_pair(supply_counts, required_supply))\n\nsupply_counts = []\nrequired_supply = 0\nprint(has_supply_pair(supply_counts, required_supply))",
            "example_output": "True\nFalse\nFalse",
            "given_python": "def has_supply_pair(supply_counts, required_supply):\n    pass",
            "given_java": "public static boolean hasSupplyPair(List<Integer> supplyCounts, int requiredSupply) {\n    // TODO\n}",
            "given_cpp": "bool hasSupplyPair(const std::vector<int>& supplyCounts, int requiredSupply) {\n    // TODO\n}",
            "given_javascript": "function hasSupplyPair(supply_counts, required_supply) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "Fuel Consumption Differences",
            "problem_instructions": "During test runs, sensors record `fuel_readings`. Write `fuel_consumption_diff` to return an array of differences between consecutive readings (`reading[i+1] - reading[i]`). If fewer than two readings, return an empty array.",
            "example_usage": "fuel_readings = [1000, 900, 850]\nprint(fuel_consumption_diff(fuel_readings))\n\nfuel_readings = [500]\nprint(fuel_consumption_diff(fuel_readings))\n\nfuel_readings = []\nprint(fuel_consumption_diff(fuel_readings))",
            "example_output": "[-100, -50]\n[]\n[]",
            "given_python": "def fuel_consumption_diff(fuel_readings):\n    pass",
            "given_java": "public static List<Integer> fuelConsumptionDiff(List<Integer> fuelReadings) {\n    // TODO\n}",
            "given_cpp": "std::vector<int> fuelConsumptionDiff(const std::vector<int>& fuelReadings) {\n    // TODO\n}",
            "given_javascript": "function fuelConsumptionDiff(fuel_readings) {\n    // TODO\n}",
            "visual": null
          }
        ]
      },

      "3": {
        "theme": "Rainforest Wildlife Census",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Species Occurrence Count",
            "problem_instructions": "The census team records every animal sighting in `species_list`. Given a string `target_species`, write `count_occurrences` that returns how many times `target_species` appears in `species_list`.",
            "example_usage": "species_list = [\"jaguar\", \"monkey\", \"jaguar\", \"toucan\"]\ntarget_species = \"jaguar\"\nprint(count_occurrences(species_list, target_species))\n\nspecies_list = [\"frog\", \"frog\", \"frog\"]\ntarget_species = \"frog\"\nprint(count_occurrences(species_list, target_species))\n\nspecies_list = []\ntarget_species = \"eagle\"\nprint(count_occurrences(species_list, target_species))",
            "example_output": "2\n3\n0",
            "given_python": "def count_occurrences(species_list, target_species):\n    pass",
            "given_java": "public static int countOccurrences(List<String> speciesList, String targetSpecies) {\n    // TODO\n}",
            "given_cpp": "int countOccurrences(const std::vector<std::string>& speciesList, const std::string& targetSpecies) {\n    // TODO\n}",
            "given_javascript": "function countOccurrences(species_list, target_species) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Common Survey Species",
            "problem_instructions": "Two teams survey different regions, producing `regionA_list` and `regionB_list`. Write `array_intersection` that returns an array of species seen by *both* teams (no duplicates).",
            "example_usage": "regionA_list = [\"toucan\", \"jaguar\", \"macaw\"]\nregionB_list = [\"macaw\", \"anaconda\", \"toucan\"]\nprint(array_intersection(regionA_list, regionB_list))\n\nregionA_list = [\"frog\"]\nregionB_list = [\"frog\", \"frog\"]\nprint(array_intersection(regionA_list, regionB_list))\n\nregionA_list = []\nregionB_list = [\"tapir\"]\nprint(array_intersection(regionA_list, regionB_list))",
            "example_output": "[\"toucan\", \"macaw\"]\n[\"frog\"]\n[]",
            "given_python": "def array_intersection(regionA_list, regionB_list):\n    pass",
            "given_java": "public static List<String> arrayIntersection(List<String> regionAList, List<String> regionBList) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> arrayIntersection(const std::vector<std::string>& regionAList, const std::vector<std::string>& regionBList) {\n    // TODO\n}",
            "given_javascript": "function array_intersection(regionA_list, regionB_list) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Unique Species (Sorted)",
            "problem_instructions": "After sorting the combined sightings, duplicates must be removed. Given a sorted array `sorted_species`, write `remove_duplicates_sorted` that returns a new array with each species appearing only once.",
            "example_usage": "sorted_species = [\"anaconda\", \"anaconda\", \"jaguar\", \"jaguar\", \"toucan\"]\nprint(remove_duplicates_sorted(sorted_species))\n\nsorted_species = [\"frog\"]\nprint(remove_duplicates_sorted(sorted_species))\n\nsorted_species = []\nprint(remove_duplicates_sorted(sorted_species))",
            "example_output": "[\"anaconda\", \"jaguar\", \"toucan\"]\n[\"frog\"]\n[]",
            "given_python": "def remove_duplicates_sorted(sorted_species):\n    pass",
            "given_java": "public static List<String> removeDuplicatesSorted(List<String> sortedSpecies) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> removeDuplicatesSorted(const std::vector<std::string>& sortedSpecies) {\n    // TODO\n}",
            "given_javascript": "function remove_duplicates_sorted(sorted_species) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Standardize Species Names",
            "problem_instructions": "To publish the report, all species names must be uppercase. Given an array `species_list`, write `uppercase_species` that returns a new array where each name is in uppercase.",
            "example_usage": "species_list = [\"jaguar\", \"macaw\"]\nprint(uppercase_species(species_list))\n\nspecies_list = [\"Toucan\"]\nprint(uppercase_species(species_list))\n\nspecies_list = []\nprint(uppercase_species(species_list))",
            "example_output": "[\"JAGUAR\", \"MACAW\"]\n[\"TOUCAN\"]\n[]",
            "given_python": "def uppercase_species(species_list):\n    pass",
            "given_java": "public static List<String> uppercaseSpecies(List<String> speciesList) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> uppercaseSpecies(const std::vector<std::string>& speciesList) {\n    // TODO\n}",
            "given_javascript": "function uppercase_species(species_list) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Cumulative Sightings",
            "problem_instructions": "Each day’s sightings are recorded in `daily_sightings`. Write `prefix_sums` that returns an array `cumulative_counts` where each element is the total up to that day.",
            "example_usage": "daily_sightings = [3, 5, 2]\nprint(prefix_sums(daily_sightings))\n\ndaily_sightings = [0, 0, 1]\nprint(prefix_sums(daily_sightings))\n\ndaily_sightings = []\nprint(prefix_sums(daily_sightings))",
            "example_output": "[3, 8, 10]\n[0, 0, 1]\n[]",
            "given_python": "def prefix_sums(daily_sightings):\n    pass",
            "given_java": "public static List<Integer> prefixSums(List<Integer> dailySightings) {\n    // TODO\n}",
            "given_cpp": "std::vector<int> prefixSums(const std::vector<int>& dailySightings) {\n    // TODO\n}",
            "given_javascript": "function prefix_sums(daily_sightings) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Sum on Even Days",
            "problem_instructions": "The lead biologist wants the total sightings on even‑numbered days (0‑based). Given `daily_sightings`, write `sum_even_indices` that returns the sum of elements at even indices.",
            "example_usage": "daily_sightings = [3, 5, 2, 4]\nprint(sum_even_indices(daily_sightings))\n\ndaily_sightings = [1]\nprint(sum_even_indices(daily_sightings))\n\ndaily_sightings = []\nprint(sum_even_indices(daily_sightings))",
            "example_output": "5\n1\n0",
            "given_python": "def sum_even_indices(daily_sightings):\n    pass",
            "given_java": "public static int sumEvenIndices(List<Integer> dailySightings) {\n    // TODO\n}",
            "given_cpp": "int sumEvenIndices(const std::vector<int>& dailySightings) {\n    // TODO\n}",
            "given_javascript": "function sum_even_indices(daily_sightings) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Sum on Odd Days",
            "problem_instructions": "Similarly, compute the total sightings on odd‑numbered days. Given `daily_sightings`, write `sum_odd_indices` that returns the sum at odd indices.",
            "example_usage": "daily_sightings = [3, 5, 2, 4]\nprint(sum_odd_indices(daily_sightings))\n\ndaily_sightings = [7]\nprint(sum_odd_indices(daily_sightings))\n\ndaily_sightings = []\nprint(sum_odd_indices(daily_sightings))",
            "example_output": "9\n0\n0",
            "given_python": "def sum_odd_indices(daily_sightings):\n    pass",
            "given_java": "public static int sumOddIndices(List<Integer> dailySightings) {\n    // TODO\n}",
            "given_cpp": "int sumOddIndices(const std::vector<int>& dailySightings) {\n    // TODO\n}",
            "given_javascript": "function sum_odd_indices(daily_sightings) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Longest Species Streak",
            "problem_instructions": "Sometimes the same species is spotted many days in a row. Given a sequence `sightings_sequence`, write `longest_streak` that returns the length of the longest consecutive run of the *same* element.",
            "example_usage": "sightings_sequence = [\"monkey\", \"monkey\", \"toucan\", \"toucan\", \"toucan\"]\nprint(longest_streak(sightings_sequence))\n\nsightings_sequence = [\"jaguar\"]\nprint(longest_streak(sightings_sequence))\n\nsightings_sequence = []\nprint(longest_streak(sightings_sequence))",
            "example_output": "3\n1\n0",
            "given_python": "def longest_streak(sightings_sequence):\n    pass",
            "given_java": "public static int longestStreak(List<String> sightingsSequence) {\n    // TODO\n}",
            "given_cpp": "int longestStreak(const std::vector<std::string>& sightingsSequence) {\n    // TODO\n}",
            "given_javascript": "function longest_streak(sightings_sequence) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Product of Sightings",
            "problem_instructions": "To gauge resource needs, the team multiplies daily equipment usage counts in `usage_counts`. Write `product_of_elements` that returns the product of all numbers (or `1` if the array is empty).",
            "example_usage": "usage_counts = [2, 3, 4]\nprint(product_of_elements(usage_counts))\n\nusage_counts = [5]\nprint(product_of_elements(usage_counts))\n\nusage_counts = []\nprint(product_of_elements(usage_counts))",
            "example_output": "24\n5\n1",
            "given_python": "def product_of_elements(usage_counts):\n    pass",
            "given_java": "public static int productOfElements(List<Integer> usageCounts) {\n    // TODO\n}",
            "given_cpp": "int productOfElements(const std::vector<int>& usageCounts) {\n    // TODO\n}",
            "given_javascript": "function product_of_elements(usage_counts) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "All Observed Species",
            "problem_instructions": "Finally, the report needs a complete list of every species seen by either team. Given `regionA_list` and `regionB_list`, write `array_union` that returns an array of all unique species from both arrays.",
            "example_usage": "regionA_list = [\"jaguar\", \"monkey\"]\nregionB_list = [\"toucan\", \"monkey\"]\nprint(array_union(regionA_list, regionB_list))\n\nregionA_list = []\nregionB_list = [\"frog\"]\nprint(array_union(regionA_list, regionB_list))\n\nregionA_list = [\"eagle\"]\nregionB_list = []\nprint(array_union(regionA_list, regionB_list))",
            "example_output": "[\"jaguar\", \"monkey\", \"toucan\"]\n[\"frog\"]\n[\"eagle\"]",
            "given_python": "def array_union(regionA_list, regionB_list):\n    pass",
            "given_java": "public static List<String> arrayUnion(List<String> regionAList, List<String> regionBList) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> arrayUnion(const std::vector<std::string>& regionAList, const std::vector<std::string>& regionBList) {\n    // TODO\n}",
            "given_javascript": "function array_union(regionA_list, regionB_list) {\n    // TODO\n}",
            "visual": null
          }
        ]
      }
    }
  }
}
