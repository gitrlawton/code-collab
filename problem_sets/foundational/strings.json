{
  "Strings": {
    "Foundational": {
      "1": {
        "theme": "Grand Museum Opening",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Welcome Sign Cleanup",
            "problem_instructions": "The museum team has drafted the welcome message for the grand opening, but it has accidental leading and trailing spaces. Given the raw message `raw_msg`, write a function `clean_message` that returns the message with no extra whitespace at the start or end.",
            "example_usage": "raw_msg = \"   Welcome to the Grand Museum   \"\nprint(clean_message(raw_msg))\n\nraw_msg = \"\t  Exhibit A: Ancient Scripts  \\n\"\nprint(clean_message(raw_msg))\n\nraw_msg = \"NoExtraSpaces\"\nprint(clean_message(raw_msg))",
            "example_output": "\"Welcome to the Grand Museum\"\n\"Exhibit A: Ancient Scripts\"\n\"NoExtraSpaces\"",
            "given_python": "def clean_message(raw_msg):\n    pass",
            "given_java": "public static String cleanMessage(String rawMsg) {\n    // TODO\n}",
            "given_cpp": "std::string cleanMessage(const std::string& rawMsg) {\n    // TODO\n}",
            "given_javascript": "function cleanMessage(rawMsg) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Exhibit Title Case",
            "problem_instructions": "After cleaning up the message, the curator needs to properly title-case each exhibit name. Given a string `title` where words are separated by spaces, write `title_case` to return the string with the first letter of each word capitalized and the rest lowercase.",
            "example_usage": "title = \"ancient pottery COLLECTION\"\nprint(title_case(title))\n\ntitle = \"the mystery of the lost scroll\"\nprint(title_case(title))\n\ntitle = \"SINGLE\"\nprint(title_case(title))",
            "example_output": "\"Ancient Pottery Collection\"\n\"The Mystery Of The Lost Scroll\"\n\"Single\"",
            "given_python": "def title_case(title):\n    pass",
            "given_java": "public static String titleCase(String title) {\n    // TODO\n}",
            "given_cpp": "std::string titleCase(const std::string& title) {\n    // TODO\n}",
            "given_javascript": "function titleCase(title) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Description Word Count",
            "problem_instructions": "The marketing team wrote a paragraph describing the new exhibit. Given the description string `desc`, write `count_words` to return the number of words in it (words are separated by one or more spaces).",
            "example_usage": "desc = \"Explore the secrets hidden in ancient scripts\"\nprint(count_words(desc))\n\ndesc = \"   Leading and   multiple   spaces   \"\nprint(count_words(desc))\n\ndesc = \"\"\nprint(count_words(desc))",
            "example_output": "6\n4\n0",
            "given_python": "def count_words(desc):\n    pass",
            "given_java": "public static int countWords(String desc) {\n    // TODO\n}",
            "given_cpp": "int countWords(const std::string& desc) {\n    // TODO\n}",
            "given_javascript": "function countWords(desc) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Longest Description Word",
            "problem_instructions": "The curator wants to highlight the most impressive word in each exhibit description. Given `desc`, write `longest_word` to return the longest word. If there is a tie, return the first occurring one.",
            "example_usage": "desc = \"Guardians oversee every artifact carefully\"\nprint(longest_word(desc))\n\ndesc = \"small big BIGGEST tiny\"\nprint(longest_word(desc))\n\ndesc = \"\"\nprint(longest_word(desc))",
            "example_output": "\"artifact\"\n\"BIGGEST\"\n\"\"",
            "given_python": "def longest_word(desc):\n    pass",
            "given_java": "public static String longestWord(String desc) {\n    // TODO\n}",
            "given_cpp": "std::string longestWord(const std::string& desc) {\n    // TODO\n}",
            "given_javascript": "function longestWord(desc) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Inscription Palindrome",
            "problem_instructions": "An ancient tablet bears an inscription. Given the raw string `inscription`, write `is_palindrome` to return `True` if the inscription reads the same backward and forward when ignoring non-letter characters and case, otherwise `False`.",
            "example_usage": "inscription = \"A man, a plan, a canal: Panama\"\nprint(is_palindrome(inscription))\n\ninscription = \"No lemon, no melon\"\nprint(is_palindrome(inscription))\n\ninscription = \"Hello, World!\"\nprint(is_palindrome(inscription))",
            "example_output": "True\nTrue\nFalse",
            "given_python": "def is_palindrome(inscription):\n    pass",
            "given_java": "public static boolean isPalindrome(String inscription) {\n    // TODO\n}",
            "given_cpp": "bool isPalindrome(const std::string& inscription) {\n    // TODO\n}",
            "given_javascript": "function isPalindrome(inscription) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Artifact Code Frequency",
            "problem_instructions": "Each artifact has a code string. The registrar needs the most common character in the code. Given `code`, write `most_frequent_char` to return the character that appears most often. If multiple tie, return any one.",
            "example_usage": "code = \"AABCCCCCBB\"\nprint(most_frequent_char(code))\n\ncode = \"abcabcabc\"\nprint(most_frequent_char(code))\n\ncode = \"\"\nprint(most_frequent_char(code))",
            "example_output": "\"C\"\n\"a\"\n\"\"",
            "given_python": "def most_frequent_char(code):\n    pass",
            "given_java": "public static char mostFrequentChar(String code) {\n    // TODO\n}",
            "given_cpp": "char mostFrequentChar(const std::string& code) {\n    // TODO\n}",
            "given_javascript": "function mostFrequentChar(code) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Security Keyword Search",
            "problem_instructions": "The security team embedded a secret keyword in the exhibit description. Given `desc` and `keyword`, write `contains_keyword` to return `True` if `keyword` appears as a substring in `desc`, otherwise `False`.",
            "example_usage": "desc = \"The hidden keyword is demeter\"\nkeyword = \"demeter\"\nprint(contains_keyword(desc, keyword))\n\ndesc = \"Guardians watch over the vault\"\nkeyword = \"vault\"\nprint(contains_keyword(desc, keyword))\n\ndesc = \"No keyword here\"\nkeyword = \"none\"\nprint(contains_keyword(desc, keyword))",
            "example_output": "True\nTrue\nFalse",
            "given_python": "def contains_keyword(desc, keyword):\n    pass",
            "given_java": "public static boolean containsKeyword(String desc, String keyword) {\n    // TODO\n}",
            "given_cpp": "bool containsKeyword(const std::string& desc, const std::string& keyword) {\n    // TODO\n}",
            "given_javascript": "function containsKeyword(desc, keyword) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Label Deduplication",
            "problem_instructions": "Over time, some exhibit labels developed repeated letters. Given a label string `label`, write `dedupe_label` to return a new string with only the first occurrence of each character (in original order).",
            "example_usage": "label = \"balloon\"\nprint(dedupe_label(label))\n\nlabel = \"MISSISSIPPI\"\nprint(dedupe_label(label))\n\nlabel = \"\"\nprint(dedupe_label(label))",
            "example_output": "\"balon\"\n\"MISP\"\n\"\"",
            "given_python": "def dedupe_label(label):\n    pass",
            "given_java": "public static String dedupeLabel(String label) {\n    // TODO\n}",
            "given_cpp": "std::string dedupeLabel(const std::string& label) {\n    // TODO\n}",
            "given_javascript": "function dedupeLabel(label) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Artifact Name Anagram",
            "problem_instructions": "Two artifacts have labels that might be anagrams. Given strings `a` and `b`, write `are_anagrams` to return `True` if one is an anagram of the other (ignoring case and non-letter characters), otherwise `False`.",
            "example_usage": "a = \"Listen\"\nb = \"Silent\"\nprint(are_anagrams(a, b))\n\na = \"Triangle\"\nb = \"Integral\"\nprint(are_anagrams(a, b))\n\na = \"Apple\"\nb = \"Pap ley\"\nprint(are_anagrams(a, b))",
            "example_output": "True\nTrue\nFalse",
            "given_python": "def are_anagrams(a, b):\n    pass",
            "given_java": "public static boolean areAnagrams(String a, String b) {\n    // TODO\n}",
            "given_cpp": "bool areAnagrams(const std::string& a, const std::string& b) {\n    // TODO\n}",
            "given_javascript": "function areAnagrams(a, b) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "Secret Message Cipher",
            "problem_instructions": "The curator wants to send a secret message using a Caesar cipher. Given `msg` and integer `shift`, write `caesar_cipher` to return the encoded message by shifting each letter forward by `shift` (wrapping within the alphabet), preserving case and leaving non-letters unchanged.",
            "example_usage": "msg = \"Attack at Dawn!\"\nshift = 3\nprint(caesar_cipher(msg, shift))\n\nmsg = \"Hello, World!\"\nshift = 5\nprint(caesar_cipher(msg, shift))\n\nmsg = \"Zoo Keeper\"\nshift = 2\nprint(caesar_cipher(msg, shift))",
            "example_output": "\"Dwwdfn dw Gdzq!\"\n\"Mjqqt, Btwqi!\"\n\"Bqq Mggrgt\"",
            "given_python": "def caesar_cipher(msg, shift):\n    pass",
            "given_java": "public static String caesarCipher(String msg, int shift) {\n    // TODO\n}",
            "given_cpp": "std::string caesarCipher(const std::string& msg, int shift) {\n    // TODO\n}",
            "given_javascript": "function caesarCipher(msg, shift) {\n    // TODO\n}",
            "visual": null
          }
        ]
      },

      "2": {
        "theme": "Historical Manuscript Restoration",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Mirror Inscription",
            "problem_instructions": "During an archaeological survey, a restorer uncovered a mirrored inscription. Given the string `mirrored_text`, write `reverse_text` to return the text in correct order.",
            "example_usage": "mirrored_text = \"!dlroW ,olleH\"\nprint(reverse_text(mirrored_text))\n\nmirrored_text = \"12345\"\nprint(reverse_text(mirrored_text))\n\nmirrored_text = \"racecar\"\nprint(reverse_text(mirrored_text))",
            "example_output": "\"Hello, World!\"\n\"54321\"\n\"racecar\"",
            "given_python": "def reverse_text(mirrored_text):\n    pass",
            "given_java": "public static String reverseText(String mirroredText) {\n    // TODO\n}",
            "given_cpp": "std::string reverseText(const std::string& mirroredText) {\n    // TODO\n}",
            "given_javascript": "function reverseText(mirroredText) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Vowel Annotations",
            "problem_instructions": "After orientation, the restorer must count vowel annotations. Given the string `page_text`, write `count_vowels` to return the number of vowels (`a`, `e`, `i`, `o`, `u`, case-insensitive).",
            "example_usage": "page_text = \"Restoration in progress\"\nprint(count_vowels(page_text))\n\npage_text = \"AEIOUaeiou\"\nprint(count_vowels(page_text))\n\npage_text = \"Rhythms\"\nprint(count_vowels(page_text))",
            "example_output": "6\n10\n0",
            "given_python": "def count_vowels(page_text):\n    pass",
            "given_java": "public static int countVowels(String pageText) {\n    // TODO\n}",
            "given_cpp": "int countVowels(const std::string& pageText) {\n    // TODO\n}",
            "given_javascript": "function countVowels(pageText) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Hidden Page Number",
            "problem_instructions": "Each folio label mixes letters and digits. Given `label`, write `extract_page_number` to pull out all digits and return them as an integer (or `0` if none).",
            "example_usage": "label = \"FolioA42B\"\nprint(extract_page_number(label))\n\nlabel = \"Page007\"\nprint(extract_page_number(label))\n\nlabel = \"SectionX\"\nprint(extract_page_number(label))",
            "example_output": "42\n7\n0",
            "given_python": "def extract_page_number(label):\n    pass",
            "given_java": "public static int extractPageNumber(String label) {\n    // TODO\n}",
            "given_cpp": "int extractPageNumber(const std::string& label) {\n    // TODO\n}",
            "given_javascript": "function extractPageNumber(label) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "Whitespace Cleanup",
            "problem_instructions": "Scanned text often has irregular spacing. Given `raw_text`, write `normalize_spaces` to replace any sequence of whitespace with a single space and trim leading/trailing spaces.",
            "example_usage": "raw_text = \"  The   ancient   scroll  \"\nprint(normalize_spaces(raw_text))\n\nraw_text = \"Line1\\n\\tLine2  Line3\"\nprint(normalize_spaces(raw_text))\n\nraw_text = \"NoExtraSpaces\"\nprint(normalize_spaces(raw_text))",
            "example_output": "\"The ancient scroll\"\n\"Line1 Line2 Line3\"\n\"NoExtraSpaces\"",
            "given_python": "def normalize_spaces(raw_text):\n    pass",
            "given_java": "public static String normalizeSpaces(String rawText) {\n    // TODO\n}",
            "given_cpp": "std::string normalizeSpaces(const std::string& rawText) {\n    // TODO\n}",
            "given_javascript": "function normalizeSpaces(rawText) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Date Reformatting",
            "problem_instructions": "Restored entries use dates as `DD-MM-YYYY`. Given `date_str`, write `reformat_date` to return it as `YYYY/MM/DD`.",
            "example_usage": "date_str = \"05-07-1920\"\nprint(reformat_date(date_str))\n\ndate_str = \"1-1-2000\"\nprint(reformat_date(date_str))\n\ndate_str = \"\"  \nprint(reformat_date(date_str))",
            "example_output": "\"1920/07/05\"\n\"2000/01/01\"\n\"\"",
            "given_python": "def reformat_date(date_str):\n    pass",
            "given_java": "public static String reformatDate(String dateStr) {\n    // TODO\n}",
            "given_cpp": "std::string reformatDate(const std::string& dateStr) {\n    // TODO\n}",
            "given_javascript": "function reformatDate(dateStr) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "Filename Conversion",
            "problem_instructions": "For the digital archive, filenames are in snake_case. Given `file_name`, write `snake_to_camel` to convert it to camelCase.",
            "example_usage": "file_name = \"ancient_scroll_image\"\nprint(snake_to_camel(file_name))\n\nfile_name = \"page_001_overview\"\nprint(snake_to_camel(file_name))\n\nfile_name = \"single\"\nprint(snake_to_camel(file_name))",
            "example_output": "\"ancientScrollImage\"\n\"page001Overview\"\n\"single\"",
            "given_python": "def snake_to_camel(file_name):\n    pass",
            "given_java": "public static String snakeToCamel(String fileName) {\n    // TODO\n}",
            "given_cpp": "std::string snakeToCamel(const std::string& fileName) {\n    // TODO\n}",
            "given_javascript": "function snakeToCamel(fileName) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "Archaic Letter Fix",
            "problem_instructions": "The transcriber noted that `f` was used in place of `s`. Given `script_text`, write `replace_archaic_f` to replace every `f`/`F` with `s`/`S` respectively.",
            "example_usage": "script_text = \"The fauthor of the fcript\"\nprint(replace_archaic_f(script_text))\n\nscript_text = \"FOO Bar\"\nprint(replace_archaic_f(script_text))\n\nscript_text = \"Nothing to change\"\nprint(replace_archaic_f(script_text))",
            "example_output": "\"The sauthor of the script\"\n\"SOO Bar\"\n\"Nothing to change\"",
            "given_python": "def replace_archaic_f(script_text):\n    pass",
            "given_java": "public static String replaceArchaicF(String scriptText) {\n    // TODO\n}",
            "given_cpp": "std::string replaceArchaicF(const std::string& scriptText) {\n    // TODO\n}",
            "given_javascript": "function replaceArchaicF(scriptText) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Summary Sentences",
            "problem_instructions": "The restoration report uses semicolons instead of periods. Given `summary`, write `split_summary` to split by semicolons and return a list of trimmed sentences.",
            "example_usage": "summary = \"Page cleaned; Ink restored; Ready for display\"\nprint(split_summary(summary))\n\nsummary = \";Leading semicolon; Ends with semicolon;\"\nprint(split_summary(summary))\n\nsummary = \"Single sentence\"\nprint(split_summary(summary))",
            "example_output": "[\"Page cleaned\", \"Ink restored\", \"Ready for display\"]\n[\"Leading semicolon\", \"Ends with semicolon\"]\n[\"Single sentence\"]",
            "given_python": "def split_summary(summary):\n    pass",
            "given_java": "public static List<String> splitSummary(String summary) {\n    // TODO\n}",
            "given_cpp": "std::vector<std::string> splitSummary(const std::string& summary) {\n    // TODO\n}",
            "given_javascript": "function splitSummary(summary) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Manuscript ID Validation",
            "problem_instructions": "Valid manuscript IDs contain only letters, digits, and hyphens. Given `manuscript_id`, write `is_valid_id` to return `True` if valid, otherwise `False`.",
            "example_usage": "manuscript_id = \"MN-1234A\"\nprint(is_valid_id(manuscript_id))\n\nmanuscript_id = \"ID_007\"\nprint(is_valid_id(manuscript_id))\n\nmanuscript_id = \"ARCHIVE-2025\"\nprint(is_valid_id(manuscript_id))",
            "example_output": "True\nFalse\nTrue",
            "given_python": "def is_valid_id(manuscript_id):\n    pass",
            "given_java": "public static boolean isValidId(String manuscriptId) {\n    // TODO\n}",
            "given_cpp": "bool isValidId(const std::string& manuscriptId) {\n    // TODO\n}",
            "given_javascript": "function isValidId(manuscriptId) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "Page Number Padding",
            "problem_instructions": "To standardize labels, page numbers must be zero-padded to width 4. Given integer `page_num`, write `pad_page_number` to return it as a string padded with leading zeros.",
            "example_usage": "page_num = 5\nprint(pad_page_number(page_num))\n\npage_num = 123\nprint(pad_page_number(page_num))\n\npage_num = 10000\nprint(pad_page_number(page_num))",
            "example_output": "\"0005\"\n\"0123\"\n\"10000\"",
            "given_python": "def pad_page_number(page_num):\n    pass",
            "given_java": "public static String padPageNumber(int pageNum) {\n    // TODO\n}",
            "given_cpp": "std::string padPageNumber(int pageNum) {\n    // TODO\n}",
            "given_javascript": "function padPageNumber(pageNum) {\n    // TODO\n}",
            "visual": null
          }
        ]
      },

      "3": {
        "theme": "Time Capsule Chronicles",
        "problems": [
          {
            "problem_number": 1,
            "problem_name": "Prefix Warning Check",
            "problem_instructions": "During the capsule audit, the crew finds entries prefixed with a status. Given the string `entry`, write `has_warning_prefix` to return `True` if `entry` starts with `\"WARNING:\"`, otherwise `False`.",
            "example_usage": "entry = \"WARNING: Oxygen levels critical\"\nprint(has_warning_prefix(entry))\n\nentry = \"STATUS: All systems nominal\"\nprint(has_warning_prefix(entry))\n\nentry = \"\"\nprint(has_warning_prefix(entry))",
            "example_output": "True\nFalse\nFalse",
            "given_python": "def has_warning_prefix(entry):\n    pass",
            "given_java": "public static boolean hasWarningPrefix(String entry) {\n    // TODO\n}",
            "given_cpp": "bool hasWarningPrefix(const std::string& entry) {\n    // TODO\n}",
            "given_javascript": "function hasWarningPrefix(entry) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 2,
            "problem_name": "Suffix Signature Extraction",
            "problem_instructions": "Each message in the capsule ends with the sender’s signature after a dash. Given `entry`, write `extract_signature` to return the substring after the last dash, or `\"\"` if no dash is found.",
            "example_usage": "entry = \"Log complete -Captain Silva\"\nprint(extract_signature(entry))\n\nentry = \"Final note -Eli\"\nprint(extract_signature(entry))\n\nentry = \"Unmarked message\"\nprint(extract_signature(entry))",
            "example_output": "\"Captain Silva\"\n\"Eli\"\n\"\"",
            "given_python": "def extract_signature(entry):\n    pass",
            "given_java": "public static String extractSignature(String entry) {\n    // TODO\n}",
            "given_cpp": "std::string extractSignature(const std::string& entry) {\n    // TODO\n}",
            "given_javascript": "function extractSignature(entry) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 3,
            "problem_name": "Command Parameter Parsing",
            "problem_instructions": "Crew commands are logged as `COMMAND: parameter`. Given `log_line`, write `parse_parameter` to return the substring after the colon and space, or `\"\"` if the format is invalid.",
            "example_usage": "log_line = \"SET_THRUST: 75%\"\nprint(parse_parameter(log_line))\n\nlog_line = \"DEPLOY_LANDING_GEAR: engaged\"\nprint(parse_parameter(log_line))\n\nlog_line = \"INVALIDENTRY\"\nprint(parse_parameter(log_line))",
            "example_output": "\"75%\"\n\"engaged\"\n\"\"",
            "given_python": "def parse_parameter(log_line):\n    pass",
            "given_java": "public static String parseParameter(String logLine) {\n    // TODO\n}",
            "given_cpp": "std::string parseParameter(const std::string& logLine) {\n    // TODO\n}",
            "given_javascript": "function parseParameter(logLine) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 4,
            "problem_name": "First Occurrence Locator",
            "problem_instructions": "The historian searches for key terms in the transcript. Given `record` and `keyword`, write `first_occurrence` to return the index of the first occurrence of `keyword` in `record`, or `-1` if not found.",
            "example_usage": "record = \"Log entry at sector Z23\"\nkeyword = \"sector\"\nprint(first_occurrence(record, keyword))\n\nrecord = \"No match here\"\nkeyword = \"error\"\nprint(first_occurrence(record, keyword))\n\nrecord = \"Repeat repeat\"\nkeyword = \"repeat\"\nprint(first_occurrence(record, keyword))",
            "example_output": "12\n-1\n7",
            "given_python": "def first_occurrence(record, keyword):\n    pass",
            "given_java": "public static int firstOccurrence(String record, String keyword) {\n    // TODO\n}",
            "given_cpp": "int firstOccurrence(const std::string& record, const std::string& keyword) {\n    // TODO\n}",
            "given_javascript": "function firstOccurrence(record, keyword) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 5,
            "problem_name": "Last Occurrence Locator",
            "problem_instructions": "To mark the final mention, the archivist needs the last position of a term. Given `log_text` and `term`, write `last_occurrence` to return the index of the last occurrence of `term`, or `-1` if absent.",
            "example_usage": "log_text = \"ABABA\"\nterm = \"BA\"\nprint(last_occurrence(log_text, term))\n\nlog_text = \"No repeat here\"\nterm = \"repeat\"\nprint(last_occurrence(log_text, term))\n\nlog_text = \"Edge edge EDGE\"\nterm = \"EDGE\"\nprint(last_occurrence(log_text, term))",
            "example_output": "3\n-1\n12",
            "given_python": "def last_occurrence(log_text, term):\n    pass",
            "given_java": "public static int lastOccurrence(String logText, String term) {\n    // TODO\n}",
            "given_cpp": "int lastOccurrence(const std::string& logText, const std::string& term) {\n    // TODO\n}",
            "given_javascript": "function lastOccurrence(logText, term) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 6,
            "problem_name": "ASCII Conversion",
            "problem_instructions": "For digital encoding, each character maps to its ASCII code. Given `text`, write `to_ascii_codes` to return a list of ASCII integers for every character in order.",
            "example_usage": "text = \"A!\"\nprint(to_ascii_codes(text))\n\ntext = \"Hi\"\nprint(to_ascii_codes(text))\n\ntext = \"\"\nprint(to_ascii_codes(text))",
            "example_output": "[65, 33]\n[72, 105]\n[]",
            "given_python": "def to_ascii_codes(text):\n    pass",
            "given_java": "public static List<Integer> toAsciiCodes(String text) {\n    // TODO\n}",
            "given_cpp": "std::vector<int> toAsciiCodes(const std::string& text) {\n    // TODO\n}",
            "given_javascript": "function toAsciiCodes(text) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 7,
            "problem_name": "ASCII Decoding",
            "problem_instructions": "To reverse the encoding, convert a list of codes back to text. Given a list `codes`, write `from_ascii_codes` to return the decoded string.",
            "example_usage": "codes = [65, 66, 67]\nprint(from_ascii_codes(codes))\n\ncodes = [32, 33]\nprint(from_ascii_codes(codes))\n\ncodes = []\nprint(from_ascii_codes(codes))",
            "example_output": "\"ABC\"\n\" !\"\n\"\"",
            "given_python": "def from_ascii_codes(codes):\n    pass",
            "given_java": "public static String fromAsciiCodes(List<Integer> codes) {\n    // TODO\n}",
            "given_cpp": "std::string fromAsciiCodes(const std::vector<int>& codes) {\n    // TODO\n}",
            "given_javascript": "function fromAsciiCodes(codes) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 8,
            "problem_name": "Run-Length Encoding",
            "problem_instructions": "To compress repeated symbols, the engineer uses run-length encoding. Given `signal`, write `run_length_encode` to return a string where each character is followed by its count of consecutive repeats.",
            "example_usage": "signal = \"AAABB\"\nprint(run_length_encode(signal))\n\nsignal = \"XYZ\"\nprint(run_length_encode(signal))\n\nsignal = \"\"\nprint(run_length_encode(signal))",
            "example_output": "\"A3B2\"\n\"X1Y1Z1\"\n\"\"",
            "given_python": "def run_length_encode(signal):\n    pass",
            "given_java": "public static String runLengthEncode(String signal) {\n    // TODO\n}",
            "given_cpp": "std::string runLengthEncode(const std::string& signal) {\n    // TODO\n}",
            "given_javascript": "function runLengthEncode(signal) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 9,
            "problem_name": "Code Type Classification",
            "problem_instructions": "The AI classifier distinguishes code formats. Given `code`, write `code_type` to return `\"alpha\"` if it contains only letters, `\"digit\"` if only digits, or `\"alphanumeric\"` if both letters and digits.",
            "example_usage": "code = \"ARCHIVE\"\nprint(code_type(code))\n\ncode = \"12345\"\nprint(code_type(code))\n\ncode = \"A1B2C3\"\nprint(code_type(code))",
            "example_output": "\"alpha\"\n\"digit\"\n\"alphanumeric\"",
            "given_python": "def code_type(code):\n    pass",
            "given_java": "public static String codeType(String code) {\n    // TODO\n}",
            "given_cpp": "std::string codeType(const std::string& code) {\n    // TODO\n}",
            "given_javascript": "function codeType(code) {\n    // TODO\n}",
            "visual": null
          },
          {
            "problem_number": 10,
            "problem_name": "Case Swap",
            "problem_instructions": "For legacy normalization, the archivist swaps letter cases. Given `note`, write `swap_case` to return a new string where each uppercase letter becomes lowercase and vice versa.",
            "example_usage": "note = \"Hello\"\nprint(swap_case(note))\n\nnote = \"WORLD\"\nprint(swap_case(note))\n\nnote = \"123AbC\"\nprint(swap_case(note))",
            "example_output": "\"hELLO\"\n\"world\"\n\"123aBc\"",
            "given_python": "def swap_case(note):\n    pass",
            "given_java": "public static String swapCase(String note) {\n    // TODO\n}",
            "given_cpp": "std::string swapCase(const std::string& note) {\n    // TODO\n}",
            "given_javascript": "function swapCase(note) {\n    // TODO\n}",
            "visual": null
          }
        ]
      }
    }
  }
}
